nodes:
  - task: langchain::chain
    title: "Invoke Chain #1"
    node_id: chain#1
    inputs_from:
      - handle: params
        value:
        from_node:
          - node_id: +python#1
            output_handle: out
      - handle: chain
        from_node:
          - node_id: output_parser_structured#1
            output_handle: output
  - task:
      ui:
        default_width: 530
      icon: ":logos:python:"
      inputs_def:
        []
      outputs_def:
        - handle: out
          description: Output
          json_schema:
            type: string
      executor:
        name: python
        options:
          entry: scriptlets/+python#1.py
    title: "Question"
    node_id: +python#1
  - task: langchain::model_open_ai
    title: "OpenAI Model #3"
    node_id: model_open_ai#3
    inputs_from:
      - handle: input
        value:
      - handle: model
        value: gpt-3.5-turbo
      - handle: temperature
        value: 0.1
      - handle: api_key
        value: Custom,aigptx,API_KEY
  - task:
      ui:
        default_width: 530
      icon: ":logos:python:"
      inputs_def:
        - handle: retriever
          description: Input
          json_schema:
            contentMediaType: oomol/var
          value: input value
      outputs_def:
        - handle: prompt_params
          description: Output
          json_schema:
            contentMediaType: oomol/var
        - handle: sources
          json_schema:
            contentMediaType: oomol/var
      executor:
        name: python
        options:
          entry: scriptlets/+python#2.py
    title: Create Params
    node_id: +python#2
    inputs_from:
      - handle: in
      - handle: retriever
        from_node:
          - node_id: retriever_chroma#1
            output_handle: output
  - task: langchain::retriever_chroma
    title: "Chroma Retriever #1"
    node_id: retriever_chroma#1
    inputs_from:
      - handle: search_k
        value: 9
      - handle: reset_database_at_beginning
        value: true
      - handle: database_path
        value: /oomol-storage/LangChainYoutube/Chroma
      - handle: embeddings
        from_node:
          - node_id: embeddings_local#1
            output_handle: output
      - handle: documents
        from_node:
          - node_id: +python#3
            output_handle: out
  - task: langchain::embeddings_local
    title: "Local Embeddings #1"
    node_id: embeddings_local#1
    inputs_from:
      - handle: id
        value: sentence-transformers/multi-qa-MiniLM-L6-cos-v1
      - handle: query_template
        value: "{input}"
  - task:
      ui:
        default_width: 530
      icon: ":logos:python:"
      inputs_def:
        - handle: pdf_file
          description: Input
          json_schema:
            type: string
            ui:widget: file
          value: input value
      outputs_def:
        - handle: out
          description: Output
          json_schema:
            contentMediaType: oomol/var
      executor:
        name: python
        options:
          entry: scriptlets/+python#3.py
    title: Load Documents
    node_id: +python#3
    inputs_from:
      - handle: in
      - handle: pdf_file
        value: /oomol-storage/LangChainYoutube/The Little Prince.pdf
  - task: langchain::prompt_chat
    title: "Chat Prompt #1"
    node_id: prompt_chat#1
    inputs_from:
      - handle: input
        value:
        from_node:
          - node_id: +python#2
            output_handle: prompt_params
      - handle: system_template
        value: >
          You are a AI Assistant. give a user question and snippets from the
          book, answer the user question. if none of the snippets answer the
          question, just say you don't know.


          here snippets from the book:

          {context}
      - handle: user_template
        value: "{input}"
  - task: langchain::output_parser_structured
    title: "Structured Output #1"
    node_id: output_parser_structured#1
    inputs_from:
      - handle: input
        value:
        from_node:
          - node_id: prompt_chat#1
            output_handle: output
      - handle: llm
        from_node:
          - node_id: model_open_ai#3
            output_handle: output
      - handle: class
        from_node:
          - node_id: +python#4
            output_handle: output
  - task:
      ui:
        default_width: 530
      icon: ":logos:python:"
      inputs_def:
        - handle: in
          ignoreNull: true
          value: input value
          description: Input
          json_schema:
            type: string
      outputs_def:
        - handle: output
          description: Output
          json_schema:
            contentMediaType: oomol/var
      executor:
        name: python
        options:
          entry: scriptlets/+python#4.py
    title: Define Class
    node_id: +python#4
    inputs_from:
      - handle: in
        value: input value
  - task:
      ui:
        default_width: 530
      icon: ":logos:python:"
      inputs_def:
        - handle: question
          json_schema:
            type: string
        - handle: answer
          json_schema:
            contentMediaType: oomol/var
        - handle: sources
          json_schema:
            contentMediaType: oomol/var
      outputs_def:
        - handle: html
          description: Output
          json_schema:
            type: string
      executor:
        name: python
        options:
          entry: scriptlets/+python#5.py
    title: Generate HTML
    node_id: +python#5
    inputs_from:
      - handle: in
        value: input value
      - handle: handle0
      - handle: question
        value: input value
        from_node:
          - node_id: +python#1
            output_handle: out
      - handle: handle1
      - handle: answer
        from_node:
          - node_id: chain#1
            output_handle: response_structured
      - handle: handle2
      - handle: sources
        from_node:
          - node_id: +python#2
            output_handle: sources
  - task: preview::html_preview
    title: "HTML Preview #1"
    node_id: html_preview#1
    inputs_from:
      - handle: html
        from_node:
          - node_id: +python#5
            output_handle: html
